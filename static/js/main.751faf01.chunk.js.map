{"version":3,"sources":["components/SearchResult.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["SearchResult","props","details","name","main","className","temp","feels_like","temp_min","temp_max","humidity","SearchBar","useState","city","setCity","cityWeather","setCityWeather","cityName","setCityName","useEffect","axios","get","then","res","data","catch","err","console","log","onSubmit","event","preventDefault","type","value","onChange","e","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iQAkCeA,EAhCM,SAACC,GAAW,IAAD,EACPA,EAAMC,QAArBC,EADsB,EACtBA,KAAMC,EADgB,EAChBA,KACd,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,QAAQF,GACtBC,EACC,4BACE,4BACE,6CACCA,EAAKE,MAER,4BACE,4CACCF,EAAKG,YAER,4BACE,qCACCH,EAAKI,UAER,4BACE,qCACCJ,EAAKK,UAER,4BACE,0CACCL,EAAKM,WAGR,OCYKC,EArCG,WAEhB,IAFsB,EAGEC,mBADJ,UAFE,mBAGfC,EAHe,KAGTC,EAHS,OAIgBF,mBAAS,IAJzB,mBAIfG,EAJe,KAIFC,EAJE,OAKUJ,mBAHZ,UAFE,mBAKfK,EALe,KAKLC,EALK,KAsBtB,OAXAC,qBAAU,WACRC,IACGC,IADH,4DAC4DJ,EAD5D,yDAEGK,MAAK,SAAAC,GACJP,EAAeO,EAAIC,SAEpBC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEf,CAACT,IAGF,6BACE,0BAAMY,SAjBS,SAAAC,GACfA,EAAMC,iBACNb,EAAYL,KAgBV,2BACEmB,KAAK,OACLC,MAAOpB,EACPqB,SAAU,SAACC,GAAD,OAAOrB,EAAQqB,EAAEC,OAAOH,UAEpC,4BAAQD,KAAK,UAAb,WAEF,kBAAC,EAAD,CAAc9B,QAASa,MCvBdsB,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCGciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.751faf01.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchResult = (props) => {\n  const { name, main } = props.details;\n  return (\n    <div className=\"result__section\">\n      <div className=\"city\">{name}</div>\n      {main ? (\n        <ul>\n          <li>\n            <span>Temperature</span>\n            {main.temp}\n          </li>\n          <li>\n            <span>Feels like</span>\n            {main.feels_like}\n          </li>\n          <li>\n            <span>Min</span>\n            {main.temp_min}\n          </li>\n          <li>\n            <span>Max</span>\n            {main.temp_max}\n          </li>\n          <li>\n            <span>Humidity</span>\n            {main.humidity}\n          </li>\n        </ul>\n      ) : null}\n    </div>\n  );\n};\nexport default SearchResult;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport SearchResult from './SearchResult';\n\n\nconst SearchBar = () => {\n\n  const initialCity = \"Mysore\";\n  const [city, setCity] = useState(initialCity);\n  const [cityWeather, setCityWeather] = useState({});\n  const [cityName, setCityName] = useState(initialCity);\n\n  const handleCity = event => {\n      event.preventDefault();\n      setCityName(city)\n  } \n  useEffect(() => {\n    axios\n      .get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=ed4b308f42f0e027100ebd456036b27a&units=metric`)\n      .then(res => {\n        setCityWeather(res.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, [cityName]);\n\n  return (\n    <div>\n      <form onSubmit={handleCity}>\n        <input\n          type=\"text\"\n          value={city}\n          onChange={(e) => setCity(e.target.value)}\n        ></input>\n        <button type=\"submit\">Search</button>\n      </form>\n      <SearchResult details={cityWeather}/>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport './App.css';\n\n// components imports\nimport SearchBar from './components/SearchBar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchBar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}